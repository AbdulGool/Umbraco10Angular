{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport let HeroesService = /*#__PURE__*/(() => {\n  class HeroesService {\n    constructor(http, messageService) {\n      this.http = http;\n      this.messageService = messageService;\n      this.api = 'http://localhost:7151/api/hero';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n\n    getHeroes() {\n      return this.http.get(this.api).pipe(tap(_ => this.log('fetched heroes')), catchError(this.handleError('getHeroesApi', [])));\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        // TODO: send the error to remote logging infrastructure\n        console.error(error); // log to console instead\n        // TODO: better job of transforming error for user consumption\n\n        this.log(`${operation} failed: ${error.message}`); // Let the app keep running by returning an empty result.\n\n        return of(result);\n      };\n    }\n\n    log(message) {\n      this.messageService.add(`HeroService: ${message}`);\n    }\n\n  }\n\n  HeroesService.ɵfac = function HeroesService_Factory(t) {\n    return new (t || HeroesService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n  };\n\n  HeroesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HeroesService,\n    factory: HeroesService.ɵfac,\n    providedIn: 'root'\n  });\n  return HeroesService;\n})();","map":null,"metadata":{},"sourceType":"module"}